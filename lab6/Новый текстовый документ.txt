class Revers_Iterator: public Const_Iterator
	{
		using iterator_type = Iterator;
		using iterator_category = std::bidirectional_iterator_tag;
		using value_type = std::string;
		using difference_type = std::ptrdiff_t;
		using pointer = std::string*;
		using reference = std::string&;

		friend StringList;

	public:
		constexpr explicit Revers_Iterator(Iterator itr)
			: itr(itr)
		{
		}
		Revers_Iterator& operator++()
		{
			--itr;
			return *this;
		}

		Revers_Iterator operator++(int)
		{
			Revers_Iterator tmp = *this;
			--itr;
			return tmp;
		}

		Revers_Iterator& operator--()
		{
			++itr;
			return *this;
		}

		Revers_Iterator operator--(int)
		{
			Revers_Iterator tmp = *this;
			++itr;
			return tmp;
		}

		std::string& operator*() const
		{
			Iterator tmp = m_node;
			return *--tmp;
		}

		/*bool operator==(Revers_Iterator other) const
		{
			return other.m_node->prev == m_node->prev;
		}
		
		bool operator!=(Revers_Iterator other) const
		{
			return !(other.m_node->prev == m_node->prev);
		}*/

	private:
		Iterator itr;
	};